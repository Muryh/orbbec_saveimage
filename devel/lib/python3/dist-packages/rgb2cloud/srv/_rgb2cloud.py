# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rgb2cloud/rgb2cloudRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rgb2cloud.msg

class rgb2cloudRequest(genpy.Message):
  _md5sum = "51aab275aa41040328bc2eed7f198470"
  _type = "rgb2cloud/rgb2cloudRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string rgbBaseFileName
int64 areaNum
area[] listAreas

================================================================================
MSG: rgb2cloud/area
point[] listPoints

================================================================================
MSG: rgb2cloud/point
int32 x
int32 y
"""
  __slots__ = ['rgbBaseFileName','areaNum','listAreas']
  _slot_types = ['string','int64','rgb2cloud/area[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rgbBaseFileName,areaNum,listAreas

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rgb2cloudRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rgbBaseFileName is None:
        self.rgbBaseFileName = ''
      if self.areaNum is None:
        self.areaNum = 0
      if self.listAreas is None:
        self.listAreas = []
    else:
      self.rgbBaseFileName = ''
      self.areaNum = 0
      self.listAreas = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.rgbBaseFileName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.areaNum
      buff.write(_get_struct_q().pack(_x))
      length = len(self.listAreas)
      buff.write(_struct_I.pack(length))
      for val1 in self.listAreas:
        length = len(val1.listPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.listPoints:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.listAreas is None:
        self.listAreas = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgbBaseFileName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgbBaseFileName = str[start:end]
      start = end
      end += 8
      (self.areaNum,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.listAreas = []
      for i in range(0, length):
        val1 = rgb2cloud.msg.area()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.listPoints = []
        for i in range(0, length):
          val2 = rgb2cloud.msg.point()
          _x = val2
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2i().unpack(str[start:end])
          val1.listPoints.append(val2)
        self.listAreas.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.rgbBaseFileName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.areaNum
      buff.write(_get_struct_q().pack(_x))
      length = len(self.listAreas)
      buff.write(_struct_I.pack(length))
      for val1 in self.listAreas:
        length = len(val1.listPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.listPoints:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.listAreas is None:
        self.listAreas = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgbBaseFileName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgbBaseFileName = str[start:end]
      start = end
      end += 8
      (self.areaNum,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.listAreas = []
      for i in range(0, length):
        val1 = rgb2cloud.msg.area()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.listPoints = []
        for i in range(0, length):
          val2 = rgb2cloud.msg.point()
          _x = val2
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2i().unpack(str[start:end])
          val1.listPoints.append(val2)
        self.listAreas.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rgb2cloud/rgb2cloudResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import rgb2cloud.msg

class rgb2cloudResponse(genpy.Message):
  _md5sum = "207f513b16056d404dd015afbfee55d0"
  _type = "rgb2cloud/rgb2cloudResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool ok
pcArea[] listPcAreas


================================================================================
MSG: rgb2cloud/pcArea
geometry_msgs/Point32[] listPcPoint

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['ok','listPcAreas']
  _slot_types = ['bool','rgb2cloud/pcArea[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ok,listPcAreas

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rgb2cloudResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ok is None:
        self.ok = False
      if self.listPcAreas is None:
        self.listPcAreas = []
    else:
      self.ok = False
      self.listPcAreas = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ok
      buff.write(_get_struct_B().pack(_x))
      length = len(self.listPcAreas)
      buff.write(_struct_I.pack(length))
      for val1 in self.listPcAreas:
        length = len(val1.listPcPoint)
        buff.write(_struct_I.pack(length))
        for val2 in val1.listPcPoint:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.listPcAreas is None:
        self.listPcAreas = None
      end = 0
      start = end
      end += 1
      (self.ok,) = _get_struct_B().unpack(str[start:end])
      self.ok = bool(self.ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.listPcAreas = []
      for i in range(0, length):
        val1 = rgb2cloud.msg.pcArea()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.listPcPoint = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.listPcPoint.append(val2)
        self.listPcAreas.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ok
      buff.write(_get_struct_B().pack(_x))
      length = len(self.listPcAreas)
      buff.write(_struct_I.pack(length))
      for val1 in self.listPcAreas:
        length = len(val1.listPcPoint)
        buff.write(_struct_I.pack(length))
        for val2 in val1.listPcPoint:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.listPcAreas is None:
        self.listPcAreas = None
      end = 0
      start = end
      end += 1
      (self.ok,) = _get_struct_B().unpack(str[start:end])
      self.ok = bool(self.ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.listPcAreas = []
      for i in range(0, length):
        val1 = rgb2cloud.msg.pcArea()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.listPcPoint = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.listPcPoint.append(val2)
        self.listPcAreas.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class rgb2cloud(object):
  _type          = 'rgb2cloud/rgb2cloud'
  _md5sum = 'cbe6659d39342a7a2160bf2d36c45404'
  _request_class  = rgb2cloudRequest
  _response_class = rgb2cloudResponse
