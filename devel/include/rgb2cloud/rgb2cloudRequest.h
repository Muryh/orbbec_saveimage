// Generated by gencpp from file rgb2cloud/rgb2cloudRequest.msg
// DO NOT EDIT!


#ifndef RGB2CLOUD_MESSAGE_RGB2CLOUDREQUEST_H
#define RGB2CLOUD_MESSAGE_RGB2CLOUDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rgb2cloud/area.h>

namespace rgb2cloud
{
template <class ContainerAllocator>
struct rgb2cloudRequest_
{
  typedef rgb2cloudRequest_<ContainerAllocator> Type;

  rgb2cloudRequest_()
    : rgbBaseFileName()
    , areaNum(0)
    , listAreas()  {
    }
  rgb2cloudRequest_(const ContainerAllocator& _alloc)
    : rgbBaseFileName(_alloc)
    , areaNum(0)
    , listAreas(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _rgbBaseFileName_type;
  _rgbBaseFileName_type rgbBaseFileName;

   typedef int64_t _areaNum_type;
  _areaNum_type areaNum;

   typedef std::vector< ::rgb2cloud::area_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::rgb2cloud::area_<ContainerAllocator> >> _listAreas_type;
  _listAreas_type listAreas;





  typedef boost::shared_ptr< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> const> ConstPtr;

}; // struct rgb2cloudRequest_

typedef ::rgb2cloud::rgb2cloudRequest_<std::allocator<void> > rgb2cloudRequest;

typedef boost::shared_ptr< ::rgb2cloud::rgb2cloudRequest > rgb2cloudRequestPtr;
typedef boost::shared_ptr< ::rgb2cloud::rgb2cloudRequest const> rgb2cloudRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator1> & lhs, const ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator2> & rhs)
{
  return lhs.rgbBaseFileName == rhs.rgbBaseFileName &&
    lhs.areaNum == rhs.areaNum &&
    lhs.listAreas == rhs.listAreas;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator1> & lhs, const ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rgb2cloud

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51aab275aa41040328bc2eed7f198470";
  }

  static const char* value(const ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51aab275aa410403ULL;
  static const uint64_t static_value2 = 0x28bc2eed7f198470ULL;
};

template<class ContainerAllocator>
struct DataType< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rgb2cloud/rgb2cloudRequest";
  }

  static const char* value(const ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string rgbBaseFileName\n"
"int64 areaNum\n"
"area[] listAreas\n"
"\n"
"================================================================================\n"
"MSG: rgb2cloud/area\n"
"point[] listPoints\n"
"\n"
"================================================================================\n"
"MSG: rgb2cloud/point\n"
"int32 x\n"
"int32 y\n"
;
  }

  static const char* value(const ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rgbBaseFileName);
      stream.next(m.areaNum);
      stream.next(m.listAreas);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rgb2cloudRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rgb2cloud::rgb2cloudRequest_<ContainerAllocator>& v)
  {
    s << indent << "rgbBaseFileName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.rgbBaseFileName);
    s << indent << "areaNum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.areaNum);
    s << indent << "listAreas[]" << std::endl;
    for (size_t i = 0; i < v.listAreas.size(); ++i)
    {
      s << indent << "  listAreas[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rgb2cloud::area_<ContainerAllocator> >::stream(s, indent + "    ", v.listAreas[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RGB2CLOUD_MESSAGE_RGB2CLOUDREQUEST_H
